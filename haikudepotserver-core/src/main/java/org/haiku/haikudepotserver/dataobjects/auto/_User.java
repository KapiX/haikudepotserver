package org.haiku.haikudepotserver.dataobjects.auto;

import java.sql.Timestamp;
import java.util.List;

import org.apache.cayenne.exp.Property;
import org.haiku.haikudepotserver.dataobjects.NaturalLanguage;
import org.haiku.haikudepotserver.dataobjects.PermissionUserPkg;
import org.haiku.haikudepotserver.dataobjects.UserPasswordResetToken;
import org.haiku.haikudepotserver.dataobjects.support.AbstractDataObject;

/**
 * Class _User was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _User extends AbstractDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Boolean> ACTIVE = Property.create("active", Boolean.class);
    public static final Property<Boolean> CAN_MANAGE_USERS = Property.create("canManageUsers", Boolean.class);
    public static final Property<Timestamp> CREATE_TIMESTAMP = Property.create("createTimestamp", Timestamp.class);
    public static final Property<String> EMAIL = Property.create("email", String.class);
    public static final Property<Boolean> IS_ROOT = Property.create("isRoot", Boolean.class);
    public static final Property<Timestamp> LAST_AUTHENTICATION_TIMESTAMP = Property.create("lastAuthenticationTimestamp", Timestamp.class);
    public static final Property<Timestamp> MODIFY_TIMESTAMP = Property.create("modifyTimestamp", Timestamp.class);
    public static final Property<String> NICKNAME = Property.create("nickname", String.class);
    public static final Property<String> PASSWORD_HASH = Property.create("passwordHash", String.class);
    public static final Property<String> PASSWORD_SALT = Property.create("passwordSalt", String.class);
    public static final Property<NaturalLanguage> NATURAL_LANGUAGE = Property.create("naturalLanguage", NaturalLanguage.class);
    public static final Property<List<PermissionUserPkg>> PERMISSION_USER_PKGS = Property.create("permissionUserPkgs", List.class);
    public static final Property<List<UserPasswordResetToken>> USER_PASSWORD_RESET_TOKENS = Property.create("userPasswordResetTokens", List.class);

    public void setActive(Boolean active) {
        writeProperty("active", active);
    }
    public Boolean getActive() {
        return (Boolean)readProperty("active");
    }

    public void setCanManageUsers(Boolean canManageUsers) {
        writeProperty("canManageUsers", canManageUsers);
    }
    public Boolean getCanManageUsers() {
        return (Boolean)readProperty("canManageUsers");
    }

    public void setCreateTimestamp(Timestamp createTimestamp) {
        writeProperty("createTimestamp", createTimestamp);
    }
    public Timestamp getCreateTimestamp() {
        return (Timestamp)readProperty("createTimestamp");
    }

    public void setEmail(String email) {
        writeProperty("email", email);
    }
    public String getEmail() {
        return (String)readProperty("email");
    }

    public void setIsRoot(Boolean isRoot) {
        writeProperty("isRoot", isRoot);
    }
    public Boolean getIsRoot() {
        return (Boolean)readProperty("isRoot");
    }

    public void setLastAuthenticationTimestamp(Timestamp lastAuthenticationTimestamp) {
        writeProperty("lastAuthenticationTimestamp", lastAuthenticationTimestamp);
    }
    public Timestamp getLastAuthenticationTimestamp() {
        return (Timestamp)readProperty("lastAuthenticationTimestamp");
    }

    public void setModifyTimestamp(Timestamp modifyTimestamp) {
        writeProperty("modifyTimestamp", modifyTimestamp);
    }
    public Timestamp getModifyTimestamp() {
        return (Timestamp)readProperty("modifyTimestamp");
    }

    public void setNickname(String nickname) {
        writeProperty("nickname", nickname);
    }
    public String getNickname() {
        return (String)readProperty("nickname");
    }

    public void setPasswordHash(String passwordHash) {
        writeProperty("passwordHash", passwordHash);
    }
    public String getPasswordHash() {
        return (String)readProperty("passwordHash");
    }

    public void setPasswordSalt(String passwordSalt) {
        writeProperty("passwordSalt", passwordSalt);
    }
    public String getPasswordSalt() {
        return (String)readProperty("passwordSalt");
    }

    public void setNaturalLanguage(NaturalLanguage naturalLanguage) {
        setToOneTarget("naturalLanguage", naturalLanguage, true);
    }

    public NaturalLanguage getNaturalLanguage() {
        return (NaturalLanguage)readProperty("naturalLanguage");
    }


    public void addToPermissionUserPkgs(PermissionUserPkg obj) {
        addToManyTarget("permissionUserPkgs", obj, true);
    }
    public void removeFromPermissionUserPkgs(PermissionUserPkg obj) {
        removeToManyTarget("permissionUserPkgs", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<PermissionUserPkg> getPermissionUserPkgs() {
        return (List<PermissionUserPkg>)readProperty("permissionUserPkgs");
    }


    public void addToUserPasswordResetTokens(UserPasswordResetToken obj) {
        addToManyTarget("userPasswordResetTokens", obj, true);
    }
    public void removeFromUserPasswordResetTokens(UserPasswordResetToken obj) {
        removeToManyTarget("userPasswordResetTokens", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<UserPasswordResetToken> getUserPasswordResetTokens() {
        return (List<UserPasswordResetToken>)readProperty("userPasswordResetTokens");
    }


    protected abstract void onPostAdd();

}
