<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright 2015-2018, Andrew Lindesay
Distributed under the terms of the MIT License.
-->

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0" xml:id="deployment">

    <title>Deployment</title>

    <para>
        This section outlines the approximate steps to deploy the web application-server.  The application-server
        build process produces a standard JEE "war" packaged web application.  In the typical haikudepotserver
        deployment, this will be launched with the <ulink url="http://www.eclipse.org/jetty">Jetty</ulink> application
        server.  A special build of the Jetty application server called &quot;jetty-runner&quot; is used which
        contains the essential Jetty server elements packaged as a single java jar file.  This avoids the need to
        install the full Jetty distribution.
    </para>

    <warning>
        <para>
            The default database installs a user with the nickname of &quot;root&quot; with a known password of
            &quot;p4mphl3t&quot;.  This password <emphasis>must</emphasis> be changed before the system is made
            available over a network.
        </para>
    </warning>

    <warning>
        <para>
            The API-related HTTP traffic into the application server uses basic or token bearer authentication.
            Either technique exposes authentication details in the request and response.  For this reason it is
            advised that HTTP traffic to and from the application server be transported as secure HTTP (https)
            in order to prevent a third party from reading the HTTP headers and extracting this information.
        </para>
    </warning>

    <para>
        Please see
        <link linkend="prerequisites">prerequisites</link> required for running this software and
        <link linkend="buildandrelease">information</link> about obtaining a build product and possibly also
        creating a release version.  The build product that you will require for deployment can be found at
        &quot;haikudepotserver-webapp/target/haikudepotserver-webapp-1.2.3.war&quot;.
        The leaf-name will vary depending on the release that is being build.  You should also refer to
        <link linkend="config">the configuration section</link>
        for details of the format and keys for the configuration file.  You will need to create a configuration
        file for your deployment.
    </para>

    <para>
        To launch the binary with 256 megabytes of heap memory, issue a command similar to;
    </para>

    <para>
        <programlisting>java \
            -Xmx256m \
            -Dfile.encoding=UTF-8 \
            -Duser.timezone=GMT0 \
            -Djava.awt.headless=true \
            -Dconfig.properties=file:///etc/haikudepotserver/config.properties \
            -jar /opt/haikudepotserver/jetty-runner.jar \
            --jar /opt/haikudepotserver/postgresql.jar \
            --port 8801 \
            /opt/haikudepotserver/haikudepotserver-webapp.war</programlisting>
    </para>

    <para>
        By default the logging will be streamed to stdout/stderr.  It is possible to configure this using
        <ulink url="http://logback.qos.ch/">logback</ulink>
        logging configuration file.
    </para>

    <section xml:id="deployment-settinguprepositories">
        <title>Setting Up Repositories</title>

        <para>
            The application server will pull &quot;.hpkr&quot; files from remote repositories that contain
            information about the packages at that repository.  Authenticated as root, it is possible to use
            the &quot;hamburger&quot; link at the top of the home page to get to the repositories, to add a repository
            and to trigger the import of a repository.  There also exists an HTTP GET invocation
            (see <link linkend="api-importrepositorydata">here</link> for more information)
            that can be made to trigger the import of a repository from another system
            <footnote>
                <para>
                    Such as the HPKR assembly process
                </para>
            </footnote>
        </para>
    </section>

    <section>
        <title>Maintenance Tasks</title>

        <para>
            Some maintenance tasks are scheduled.  These tasks are scheduled from outside the application server
            in order to simplify a multi-instance deployment topology.  A simple approach to this is to schedule
            using the cron tool.  This would require a &quot;crontab&quot; entry such as;
            &quot;14 * * * * curl "http://localhost:8080/maintenance/mediumterm&quot;
        </para>

        <para>
            The host and port should be adjusted to suit your deployment environment.
        </para>
    </section>

    <section>
        <title>Accessing the Web Environment</title>

        <para>
            Once running, the web environment will be accessible from; &quot;http://localhost:8080/&quot;
        </para>
    </section>

    <section>
        <title>Deployment with Docker</title>

        <figure>
            <title>The processes involved in a Docker build and release process.</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/img-docker-build-process.png" format="PNG"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para>
            The coloured lines represent scripted or automated data flows and
            the black more manual flows or processes.  There is a mix of
            automation and manual-intervention.
        </para>

        <section>
            <title>Haiku Vector Icon Rendering</title>
            <para>
                The hvif2png program is packaged as a tar-ball in the HDS source.
                It is build for the correct platform that the HDS Docker image will
                use as its base image.  This tar-ball is then included in the HDS
                source.
            </para>
        </section>

        <section>
            <title>Release Process</title>

            <para>
                This process is driven by Python scripts in the HDS repository.
                Based on a template, it will render a Dockerfile into the
                source.  The Dockerfile contains the correct, coordinated
                versions of;
            </para>

            <para>
                <itemizedlist>
                    <listitem>Haiku Depot Server (.war)</listitem>
                    <listitem>Postgres Driver (.jar)</listitem>
                    <listitem>Jetty Runner (.jar)</listitem>
                </itemizedlist>
            </para>

            <para>
                The new release is tagged in GitHub.
            </para>

        </section>

        <section>
            <title>Build Process</title>
            <para>
                Now the source is checked out by hand at the release tag.  From
                this process, driven by the Maven build tool, a Java Servlet
                .war file is generated.  Once generated, the .war file can be
                uploaded to the GitHub release page for HDS at the correct
                version.  This last step is done by hand.
            </para>
        </section>

        <section>
            <title>Docker Image</title>
            <para>
                The source can again be checked out at the correct tag.  This
                provides a Dockerfile ready to go.  The Docker tooling is used
                to create the image.  This will use the files in the HDS source
                as well as resources from the internet to assemble a Docker
                image that can be run in Docker on a suitable virtual
                environment.
            </para>
        </section>

    </section>

</chapter>
