<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright 2015-2017, Andrew Lindesay
Distributed under the terms of the MIT License.
-->

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0" xml:id="datamodel">

    <title>Data Model</title>

    <figure id="datamodel-diagram">
        <title>The persisted data model for the application server.</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="images/img-datamodel.png" format="PNG"/>
            </imageobject>
        </mediaobject>
    </figure>

    <para>
        In the diagram above, the diagram does not show &quot;modifyTimestamp&quot; nor does it show
        &quot;createTimestamp&quot;.
    </para>

    <section xml:id="datamodel-uniqueidentifiers">
        <title>Unique Identifiers</title>
        <para>
            In general, an artifical identifier used to identify instances.  This artificial identifier has a name of
            &quot;code&quot;.  In some cases an existing natual key is already in place and so that attribute is used.  An
            example of this is the &quot;Pkg&quot; entity which is uniquely identified by its attribute &quot;name&quot;.  Note that the
            identifier is not the primary key.  In all cases, the database keys are artificial numerical
            identifiers.
        </para>
    </section>

    <section>
        <title>Repositories</title>
        <para>
            A package is a cohesive piece of software or software sub-system for the Haiku operating system.
        </para>
        <para>
            Repositories are sources of packages.  A repository has a number of repository sources.  Each
            RepositorySource covers an Architecture and each RepositorySource can have a number of Mirrors.
            One Mirror is a "primary" Mirror for the repository and is where HaikuDepotServer will go to
            get updated data for this RepositorySource when it needs to.  A RepositorySourceMirror is
            associated with a Country and in this way it is possible to identify a good source of repository
            data to use dependent on a user's physical location.
        </para>
        <para>
            The RepositorySource contains a "url" field and this URL acts as an identifier for the RepositorySource.
            The actual URLs where repository data can be fetched are found in the RepositorySourceMirror-s.
            You can find out more about the URLs and expected resources in the
            <link linkend="repositories">repository</link> section.
        </para>

        <para>
            Package versions' data is &quot;siloed&quot; between repositories, but some data such as localization, iconography and
            screenshots are shared.
        </para>
    </section>

    <section>
        <title>Subordinate Packages</title>
        <para>
            Some packages are loosely in a relationship with a main package.  For example, the package
            &quot;aspell_devel&quot; is subordinate to &quot;aspell&quot; and &quot;qupzilla_x86&quot; is subordinate
            to &quot;qupzilla&quot;.  In such cases, a relationship exists, by naming convention, wherein the
            subordinate package should take on some of the meta-data of the main package.  The system achieves this by
            copying the meta-data when it is mutated in the main over into the subordinate package.  This copy process
            is chosen because it maintains the independence of the packages and reduces overhead in querying data.
            The following table shows for each package suffix which meta-data is copied over to the subordinate package.
        </para>

        <informaltable>
            <tgroup cols="4">
                <thead>
                    <row>
                        <entry>Suffix</entry>
                        <entry>Localizations</entry>
                        <entry>Icons</entry>
                        <entry>Screenshots</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>_x86</entry>
                        <entry>Y</entry>
                        <entry>Y</entry>
                        <entry>Y</entry>
                    </row>
                    <row>
                        <entry>_devel</entry>
                        <entry>Y</entry>
                        <entry>Y</entry>
                        <entry>N</entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>

    </section>

</chapter>